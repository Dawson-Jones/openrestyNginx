worker_processes  1;

error_log  logs/error.log error;    # 日志级别

events {
    worker_connections  1024;
}

http {
    lua_package_path '$prefix/lua/?.lua;/blah/?.lua;;';
    lua_code_cache off;
    server {
        listen    3344;
        location /test {
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                -- 请注意这里 auth 的调用过程
                local count
                count, err = red:get_reused_times()
                if 0 == count then
                    ok, err = red:auth(nil)
                    if not ok then
                        ngx.say("failed to auth: ", err)
                        return
                    end
                elseif err then
                    ngx.say("failed to get reused times: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                -- 连接池大小是100个，并且设置最大的空闲时间是 10 秒
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end
            }
        }
    }
}
